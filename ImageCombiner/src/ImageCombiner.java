
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Daniel
 */
public class ImageCombiner extends javax.swing.JFrame {

    /**
     * Creates new form ImageCombiner
     */
    public ImageCombiner() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblFeedback = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txt3 = new javax.swing.JTextField();
        txt2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txt1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image Combiner");

        lblFeedback.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel4.setText("No speech marks allowed in the textboxes");

        jLabel3.setText("Output Image:");

        jButton1.setText("Combine Vertically");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jLabel2.setText("Bottom Image:");

        jLabel1.setText("Top Image:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt1)
                            .addComponent(txt2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(lblFeedback, javax.swing.GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(lblFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        try {
            //Get Images and sizes
            BufferedImage topImage = ImageIO.read(new File(txt1.getText()));
            BufferedImage bottomImage = ImageIO.read(new File(txt2.getText()));
            int width = Math.max(topImage.getWidth(), bottomImage.getWidth());
            int height = topImage.getHeight() + bottomImage.getHeight();

            //Get non-white pixels where white = 255,255,255
            int bottomLeft = 0;
            int bottomRight = 0;
            int topLeft = 0;
            int topRight = 0;
            
            for (int x = 0; x < topImage.getWidth(); x++)
            {
                Color color = new Color(topImage.getRGB(x, topImage.getHeight()));
                if ((color.getRed() == 255 && color.getGreen() == 255 && color.getBlue() == 255) == false)
                    bottomLeft = x;
                else if (x == topImage.getWidth())
                    throw new Exception();
            }
            for (int x = topImage.getWidth(); x < 0; x--)
            {
                Color color = new Color(topImage.getRGB(x, topImage.getHeight()));
                if ((color.getRed() == 255 && color.getGreen() == 255 && color.getBlue() == 255) == false)
                    bottomRight = x;
                else if (x == 1)
                    throw new Exception();
            }
            if (bottomRight == bottomLeft )
                throw new Exception();
                
            for (int x = 0; x < bottomImage.getWidth(); x++)
            {
                Color color = new Color(bottomImage.getRGB(x, bottomImage.getHeight()));
                if ((color.getRed() == 255 && color.getGreen() == 255 && color.getBlue() == 255) == false)
                    topLeft = x;
                else if (x == topImage.getWidth())
                    throw new Exception();
            }
            for (int x = bottomImage.getWidth(); x < 0; x--)
            {
                Color color = new Color(bottomImage.getRGB(x, bottomImage.getHeight()));
                if ((color.getRed() == 255 && color.getGreen() == 255 && color.getBlue() == 255) == false)
                    topRight = x;
                else if (x == 1)
                    throw new Exception();
            }
            if (topLeft == topRight)
                throw new Exception();
            
            //Do maths for combining
			bottomDistance = bottomRight - bottomLeft;
			topDistance = topRight - topLeft;
			
            if (bottomLeft == topLeft && bottomRight == topRight) {
                
            }
            else if (bottomDistance == topDistance)
            {
               
            }
            else if (bottomDistance > topDistance)
            {
				decimal difference = bottomDistance / topDistance;
				
				
               /*60
			   90
			   
			   2/3
			   
			   */
            }
            else if (bottomDistance < topDistance)
            {
               
            }
            
            
            //Combine vertically
            BufferedImage combinedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
            Graphics combinedImageGraphics = combinedImage.getGraphics();
            combinedImageGraphics.drawImage(topImage, 0, 0, null);
            combinedImageGraphics.drawImage(bottomImage, 0, topImage.getHeight(), null);

            //Save to new file
            //Although being rendered as a png, you still need the .png on the end of the Output textbox
            ImageIO.write(combinedImage, "PNG", new File(txt3.getText()));

            lblFeedback.setForeground(Color.GREEN);
            lblFeedback.setText("Success!");
        }
        catch (Exception ex) {
            lblFeedback.setForeground(Color.RED);
            lblFeedback.setText("Failure!");
        }
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageCombiner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageCombiner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageCombiner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageCombiner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ImageCombiner().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblFeedback;
    private javax.swing.JTextField txt1;
    private javax.swing.JTextField txt2;
    private javax.swing.JTextField txt3;
    // End of variables declaration//GEN-END:variables
}
