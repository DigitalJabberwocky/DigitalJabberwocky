
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;

public class ImageCombiner extends javax.swing.JFrame {

    /**
     * Creates new form ImageCombiner
     */
    public ImageCombiner() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblFeedback = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txt3 = new javax.swing.JTextField();
        txt2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txt1 = new javax.swing.JTextField();
        chkColour = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image Combiner");

        lblFeedback.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel4.setText("No speech marks allowed in the textboxes");

        jLabel3.setText("Output Image:");

        jButton1.setText("Combine Vertically");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jLabel2.setText("Bottom Image:");

        jLabel1.setText("Top Image:");

        chkColour.setText("Colour Combine");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFeedback, javax.swing.GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(chkColour))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addComponent(txt3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt1)
                            .addComponent(txt2))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel4)
                    .addComponent(chkColour))
                .addGap(18, 18, 18)
                .addComponent(lblFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        try {
            //Get Images and sizes
            ImageWithCorners topImage = new ImageWithCorners(ImageIO.read(new File(txt1.getText())));
            ImageWithCorners bottomImage = new ImageWithCorners(ImageIO.read(new File(txt2.getText())));
            BufferedImage combinedImage;

            if (chkColour.isSelected()) {
                if (topImage.bottomDistance() > bottomImage.topDistance()) {
                    //Scale down top image
                    double difference = bottomImage.topDistance() / topImage.bottomDistance();
                    BufferedImage scaledImage = new BufferedImage((int)Math.ceil(topImage.imageWidth() * difference),
                            (int)Math.ceil(topImage.imageWidth() * difference), BufferedImage.TYPE_INT_ARGB);
                    Graphics scaledImageGraphics = scaledImage.getGraphics();
                    scaledImageGraphics.drawImage(topImage.image(), 0, 0, (int)Math.ceil(topImage.imageWidth() * difference),
                            (int)Math.ceil(topImage.imageWidth() * difference), null);
                    topImage = new ImageWithCorners(scaledImage);

                    //Combine vertically
                    combinedImage = new BufferedImage(Math.max(topImage.imageWidth(), bottomImage.imageWidth()),
                    topImage.imageHeight() + bottomImage.imageHeight(), BufferedImage.TYPE_INT_ARGB);
                    Graphics combinedImageGraphics = combinedImage.getGraphics();
                    combinedImageGraphics.drawImage(topImage.image(), bottomImage.topLeft().x - topImage.bottomLeft().x, 0, null);
                    combinedImageGraphics.drawImage(bottomImage.image(), 0, topImage.imageHeight(), null);
                }
                else if (topImage.bottomDistance() < bottomImage.topDistance()) {
                    //Scale down bottom image
                    double difference = topImage.bottomDistance() / bottomImage.topDistance();
                    BufferedImage scaledImage = new BufferedImage((int)Math.ceil(bottomImage.imageWidth() * difference),
                            (int)Math.ceil(bottomImage.imageWidth() * difference), BufferedImage.TYPE_INT_ARGB);
                    Graphics scaledImageGraphics = scaledImage.getGraphics();
                    scaledImageGraphics.drawImage(bottomImage.image(), 0, 0, (int)Math.ceil(bottomImage.imageWidth() * difference),
                            (int)Math.ceil(bottomImage.imageWidth() * difference), null);
                    topImage = new ImageWithCorners(scaledImage);

                    //Combine vertically
                    combinedImage = new BufferedImage(Math.max(topImage.imageWidth(), bottomImage.imageWidth()),
                    topImage.imageHeight() + bottomImage.imageHeight(), BufferedImage.TYPE_INT_ARGB);
                    Graphics combinedImageGraphics = combinedImage.getGraphics();
                    combinedImageGraphics.drawImage(topImage.image(), 0, 0, null);
                    combinedImageGraphics.drawImage(bottomImage.image(), topImage.bottomLeft().x - bottomImage.topLeft().x, topImage.imageHeight(), null);
                }
                else {
                    //Combine vertically
                    combinedImage = new BufferedImage(Math.max(topImage.imageWidth(), bottomImage.imageWidth()),
                    topImage.imageHeight() + bottomImage.imageHeight(), BufferedImage.TYPE_INT_ARGB);
                    Graphics combinedImageGraphics = combinedImage.getGraphics();
                    combinedImageGraphics.drawImage(topImage.image(), bottomImage.topLeft().x - topImage.bottomLeft().x, 0, null);
                    combinedImageGraphics.drawImage(bottomImage.image(), 0, topImage.imageHeight(), null);
                }
            }
            else {
                //Combine vertically
                 combinedImage = new BufferedImage(Math.max(topImage.imageWidth(), bottomImage.imageWidth()),
                 topImage.imageHeight() + bottomImage.imageHeight(), BufferedImage.TYPE_INT_ARGB);
                 Graphics combinedImageGraphics = combinedImage.getGraphics();
                 combinedImageGraphics.drawImage(topImage.image(), 0, 0, null);
                 combinedImageGraphics.drawImage(bottomImage.image(), topImage.bottomLeft().x - bottomImage.topLeft().x, topImage.imageHeight(), null);
            }
            
            //Save to new file
            ImageIO.write(combinedImage, "PNG", new File(txt3.getText()));
            lblFeedback.setForeground(Color.GREEN);
            lblFeedback.setText("Success!");
        }
        catch (Exception ex) {
            lblFeedback.setForeground(Color.RED);
            lblFeedback.setText("Failure!");
        }
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageCombiner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageCombiner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageCombiner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageCombiner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ImageCombiner().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkColour;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblFeedback;
    private javax.swing.JTextField txt1;
    private javax.swing.JTextField txt2;
    private javax.swing.JTextField txt3;
    // End of variables declaration//GEN-END:variables
}
